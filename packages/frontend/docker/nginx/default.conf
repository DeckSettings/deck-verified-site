# TODO: Test this cache stuff
# Define Cache Zone (Stores up to 50MB of cached responses for 24 hours)
#proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=static_cache:50m inactive=24h max_size=50m;

# Identify Bot Traffic for Page Replica (https://github.com/Page-Replica/page-replica)
map $http_user_agent $search_engines {
    "~bingbot" 1;
    "~BingPreview" 1;
    "~Googlebot" 1;
    "~GoogleOther" 1;
    "~Google-InspectionTool" 1;
    "~Mediapartners-Google" 1;
    "~AdsBot-Google-Mobile" 1;
    "~AdsBot-Google" 1;
    "~Slurp" 1;
    "~DuckDuckBot" 1;
    "~Baiduspider" 1;
    "~YandexBot" 1;
    "~Sogou" 1;
    "~Exabot" 1;
    "~ia_archiver" 1;
    "~propellerads" 1;

    # Add more search engines here
}

map $http_user_agent $social_networks {
    "~*facebook" 1;
    "~*twitter" 1;
    "~*linkedin" 1;
    "~*reddit" 1;
    "~*telegram" 1;

    # Add more social networks here
}

map $search_engines$social_networks $is_bot {
    "" "";
    default 1;
}

server {
    listen 9021;
    server_name localhost;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    charset utf-8;

    # Enable gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Redirect root requests to /deck-verified/
    location / {
        return 302 $scheme://$http_host/deck-verified/;
    }

    location = /deck-verified/health {
        default_type text/plain;
        return 200 "OK";
    }

    # Serve JavaScript, CSS, and static assets with browser cache
    location ~* \.(?:js|css|woff2?|ttf|otf|eot|svg|ico|jpg|jpeg|png|gif|webp|mp4|json)$ {
        root /usr/share/nginx/html;
        expires max;
        access_log off;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }

    # Proxy API requests
    location /deck-verified/api/ {
        proxy_pass http://api:9022/deck-verified/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Serve static files for the SPA
    location /deck-verified/ {
        if ($is_bot) {
            rewrite (.*) /page-replica last;
            break;
        }

        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /deck-verified/index.html;
        # Prevent browser cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        if_modified_since off;
        expires off;
        etag off;
    }

    # Serve robots.txt from API
    location = /robots.txt {
        access_log off;
        log_not_found off;
        proxy_pass http://api:9022/robots.txt;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Serve sitemap.xml from API
    location = /sitemap.xml {
        access_log off;
        log_not_found off;
        proxy_pass http://api:9022/sitemap.xml;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # TODO: Test using a cache for this request
        #add_header X-Cache $upstream_cache_status;
    }

    # Serve to page-replica for bot traffic
    location /page-replica {
        if ($is_bot = 0) {
            return 404;
        }
        resolver 8.8.8.8 8.8.4.4;
        set $pageReplicaHost "cache.page-replica.com";
        set $domainName "deckverified.games";
        set $siteId "K6sueyrMEMu6N6j59";
        proxy_pass https://$pageReplicaHost/$siteId/$domainName$request_uri;
    }

    # Serve error pages
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # Block hidden files
    location ~ /\.(?!well-known).* {
        deny all;
    }
}
